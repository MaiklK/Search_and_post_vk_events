#!/usr/bin/python
# -*- coding: UTF-8 -*-
import datetime
import os
import traceback
import vk_api
import configparser
import log
import helpers as th


def error(message):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    print(message)
    input("–í–≤–µ–¥–∏—Ç–µ 'Enter' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞")
    exit()


def check_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    :param file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    return os.path.exists(file_path)


def get_start_dt(days_delta: int, hours_delta: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º –Ω–∞ –¥–Ω–∏ –∏ —á–∞—Å—ã

    :param days_delta: —Ä–∞–∑–Ω–∏—Ü–∞ –¥–Ω–µ–π
    :param hours_delta: —Ä–∞–∑–Ω–∏—Ü–∞ —á–∞—Å–æ–≤
    """
    return datetime.datetime.now() + datetime.timedelta(days=days_delta, hours=hours_delta)


def list_from_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞

    :param file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    with open(file_path, 'r', encoding='utf-8') as file:
        filelist = file.read().splitlines()
    return filelist


def authorization_vk(login: str, password: str, app_id, client_secret: str, api_version='5.131'):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –í–∫–æ–Ω—Ç–∞–∫—Ç–µ. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –∫—É–∫–∞–º–∏,
    –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –±–µ—Ä—É—Ç—Å—è –¥–∞–Ω–Ω—ã–µ

    :param login: –ª–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ
    :param password: –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ
    :param app_id: id Standalone-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    :param client_secret: —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    :param api_version: –í–µ—Ä—Å–∏—è API
    """
    vk_session = vk_api.VkApi(login=login, password=password, app_id=app_id, client_secret=client_secret,
                              api_version=api_version)
    try:
        vk_session.auth(token_only=True)
        return vk_session
    except Exception:
        log.log(traceback.format_exc())
        error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–µ')


def search_all_event_by_city(vk_session, search_querys: list, city_id: int, country_id: int):
    """–ù–∞—Ö–æ–¥–∏—Ç id –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –í–∫–æ–Ω—Ç–µ–∫—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–∏—Å–∫–æ–≤—ã–º
    –∑–∞–ø—Ä–æ—Å–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞

    :param vk_session: –æ–±—ä–µ–∫—Ç vk_api
    :param search_querys: –ª–∏—Å—Ç —Å –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    :param city_id: id –≥–æ—Ä–æ–¥–∞
    :param country_id: id —Å—Ç—Ä–∞–Ω—ã
    """
    search_events = {}
    with vk_api.VkRequestsPool(vk_session) as pool:
        for query in search_querys:
            search_events[query] = pool.method('groups.search', {
                'q': query, 'fields': 'photo', 'type': 'event',
                'country_id': country_id, 'city_id': city_id, 'future': 1,
                'count': 1000
            })
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ
    all_events = [value.result['items'] for value in search_events.values()]
    # –≤—ã–¥–µ—Ä–≥–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    all_id_groups = [event['id'] for events in all_events for event in events]
    return list(set(all_id_groups))


def unix_to_datetime(timestamp):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UnixTime –≤ —Ñ–æ—Ä–º–∞—Ç datetime

    :param timestamp: –≤—Ä–µ–º—è Unix
    """
    return datetime.datetime.fromtimestamp(int(timestamp))


def sort_group_by_date(vk_session, all_id_groups: list, dt, hours_delta):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—á–∞—Ç—å—Å—è —Å–æ —Å–¥–≤–∏–≥–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç + —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

    :param vk_session: –æ–±—ä–µ–∫—Ç vk_api
    :param all_id_groups: —Å–ø–∏—Å–æ–∫ id –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    :param dt: datetime.now
    :param hours_delta: —Ä–∞–∑–º–µ—Ä —Å–¥–≤–∏–≥–∞ –ø–æ –¥–Ω—è–º
    """
    sort_events = []
    name_events = []
    while len(all_id_groups) != 0:
        ids = ''
        for i in range(499):
            if len(all_id_groups) != 0:
                ids += f"{all_id_groups.pop(0)},"
        even_not_sort = vk_api.VkApi.method(vk_session, method='groups.getById',
                                            values={'fields': 'start_date', 'group_ids': ids})
        for event in even_not_sort:
            if event['is_closed'] == 1 and event['type'] == 'group' and event.get('start_date', -1) == -1:
                continue
            if event.get('start_date') < 0:
                event['start_date'] *= -1
            if unix_to_datetime(event['start_date'] + hours_delta * 3600).strftime('%d.%m.%y') == dt.strftime(
                    '%d.%m.%y'):
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–≤ –ø–æ–∏—Å–∫–µ –∫—É—á–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ id)
                event_name = th.just_leters_and_numbers(th.clean_name(event['name'], dt))
                check_name_event = event_name
                if check_name_event not in name_events:
                    name_events.append(check_name_event)
                    sort_events.append({"id": event['id'],
                                        "name": event['name'],
                                        "screen_name": event['screen_name'],
                                        "start_date": event['start_date'] + hours_delta * 3600})
    return sort_events


def up_fields_for_events(vk_session, all_id_groups: list, field: str, events: list):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ api –í–∫–æ–Ω—Ç–∞–∫—Ç–µ)
    –∫ —Å–ª–æ–≤–∞—Ä—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

    :param vk_session: –æ–±—ä–µ–∫—Ç vk_api
    :param all_id_groups: id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    :param field: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
    :param events: —Å–ª–æ–≤–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    ids = ''
    while len(all_id_groups) != 0:
        if len(ids) > 499:
            break
        ids += f"{all_id_groups.pop(0)},"
    events_fields = vk_api.VkApi.method(vk_session, method='groups.getById',
                                        values={'fields': field, 'group_ids': ids})
    for i in range(len(events)):
        for events_field in events_fields:
            if events[i]['id'] == events_field['id']:
                events[i][field] = events_field.get(field, 0)
    return events


def up_all_fields(vk_session, fields: list, events: list):
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ api –í–∫–æ–Ω—Ç–∞–∫—Ç–µ)
    –∫ —Å–ª–æ–≤–∞—Ä—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

    :param vk_session: –æ–±—ä–µ–∫—Ç vk_api
    :param fields: —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
    :param events: —Å–ª–æ–≤–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    for field in fields:
        ids = th.ids_from_list_events(events)
        events = up_fields_for_events(vk_session, ids, field, events)
    return events


def normal_date(start_date: int, hours_delta: int):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ utctime
    –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥ –∏ —Å–º–µ—â–∞–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏–∑ hours_delta

    :param start_date: –¥–∞—Ç–∞ –≤ utctime
    :param hours_delta: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö
    """
    start_date = unix_to_datetime(start_date)
    start_date += datetime.timedelta(hours=-hours_delta)
    return start_date.strftime("%d.%m %H:%M")


def generate_block_text_events(events: list, hours_delta: int, dt):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞

    :param events: —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    :param hours_delta: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö
    :param dt: datetime
    """
    i = 1
    text_block_events = ''
    for event in events:
        event_name = th.clean_name(event['name'], dt).upper()
        start_date = normal_date(event['start_date'], hours_delta)
        if event.get('finish_date', 0) == 0:
            text_block_events += f"\n‚åö {start_date}‚åö\n{i}.üì¢@club{event['id']}({event_name})"
        else:
            finish_date = normal_date(event['finish_date'], hours_delta)
            text_block_events += f'\n‚åö {start_date} - {finish_date}‚åö\n{i}.üì¢@club{event["id"]}({event_name})'
        i += 1
    return text_block_events


def generate_trash_block(events: list, hours_delta: int, dt):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–ª–æ–∫ —Å –º—É—Å–æ—Ä–Ω—ã–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞

    :param events: —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    :param hours_delta: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö
    :param dt: datetime
    """
    text_block_events = ''
    i = 1
    for event in events:
        event_name = th.clean_name(event['name'], dt).lower()
        start_date = normal_date(event["start_date"], hours_delta)
        text_block_events += f'{i}. {start_date} @club{event["id"]}({event_name})\n'
        i += 1
    return text_block_events


def get_photo_events(events: list, photo_list: list):
    """–î–æ–±–∞–≤–ª—è–µ—Ç photo –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö 10 —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

    :param events: —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    :param photo_list: —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞
    """
    for event in events:
        if len(photo_list) == 10:
            return photo_list
        if event.get('has_photo', 0) == 1:
            if event['crop_photo'] == 0:
                continue
            photo_list.append(
                f"photo{str(event['crop_photo']['photo']['owner_id'])}_{str(event['crop_photo']['photo']['id'])}")
    return photo_list


def photo_to_post(events1: list, events2: list):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 10 –ø–µ—Ä–≤—ã—Ö —Ñ–æ—Ç–æ –∏–∑ 2 —Å–ø–∏—Å–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

    :param events1: —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π 1
    :param events2: —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π 2
    """
    photos = ''
    photo_list = []
    photo_list = get_photo_events(events1, photo_list)
    photo_list = get_photo_events(events2, photo_list)
    for photo in photo_list:
        photos += f'{photo},'
    return photos


def post_events_in_vk(vk_session, post_interest, post_other, post_not_interest, id_group, city_name, dt, photos):
    """–ü–æ—Å—Ç–∏–Ω–≥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ

    :param post_interest: —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    :param post_other: —Ç–µ–∫—Å—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö(–ø–æ –∫–ª—é—á–∞–º) —Å–æ–±—ã—Ç–∏–π
    :param post_not_interest: —Ç–µ–∫—Å—Ç –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    :param id_group: id –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (–∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º)
    :param city_name: –∏–º—è –≥–æ—Ä–æ–¥–∞
    :param dt: datetime
    :param photos: —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    text_to_post = f'–í–°–ï –°–û–ë–´–¢–ò–Ø|–ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø –í–ö–û–ù–¢–ê–ö–¢–ï {city_name.upper()} –ù–ê {dt.strftime("%d.%m.%Y")}\n'
    if len(post_interest) > 0:
        text_to_post += f'\n–ü–û–•–û–î–£ –¢–£–¢ –ë–£–î–ï–¢ –ò–ù–¢–ï–†–ï–°–ù–û:\n{post_interest}\n'
    if len(post_other) > 0:
        text_to_post += f'\n–ù–ï–û–ü–û–ó–ù–ê–ù–ù–´–ï –°–û–ë–´–¢–ò–Ø:\n{post_other}\n'
    if len(post_not_interest) > 0:
        text_to_post += f'\n–≠–¢–ò –ú–û–ñ–ù–û –ù–ï –°–ú–û–¢–†–ï–¢–¨:\n\n{post_not_interest}'
    text_to_post = {'owner_id': f'-{id_group}', 'message': text_to_post, 'attachments': photos}
    return vk_api.VkApi.method(vk_session, 'wall.post', text_to_post)


def post_nothing(vk_session, id_group, city_name, dt):
    """–ü–æ—Å—Ç–∏–Ω–≥ –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É

    :param id_group: id –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (–∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º)
    :param city_name: –∏–º—è –≥–æ—Ä–æ–¥–∞
    :param dt: datetime
    """
    text_to_post = f'–í–°–ï –°–û–ë–´–¢–ò–Ø|–ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø –í–ö–û–ù–¢–ê–ö–¢–ï {city_name} –ù–ê {dt.strftime("%d.%m.%Y")}\n\n' \
                   f'–ê –°–û–ë–´–¢–ò–ô –¢–û –ò –ù–ï–¢–£'
    text_to_post = {'owner_id': f'-{id_group}', 'message': text_to_post}
    return vk_api.VkApi.method(vk_session, 'wall.post', text_to_post)


def main(login: str, password: str, app_id: str, client_secret: str, id_country: str, id_city: str,
         id_group: str, city_name: str, hours_delta: int, days_delta: int,
         interesting_path: str, not_interesting_path: str):
    """–¢–µ–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∏—â–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∑–∞–¥–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 'days_delta',
    –∂–µ–ª–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä 'id_country' –∏ –≥–æ—Ä–æ–¥–∞ 'id_city', –ø—Ä–∏ —ç—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä—É—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ 'interesting_path'
    –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ 'not_interesting_path'

    :param login: –ª–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ VK
    :param password: –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ VK
    :param app_id: id –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    :param client_secret:  —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    :param id_country: id —Å—Ç—Ä–∞–Ω—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    :param id_city: id –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    :param id_group: id –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å
    :param city_name: –∏–º—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    :param hours_delta: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö –æ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    :param days_delta: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö 0 => —Å–µ–≥–æ–¥–Ω—è
    :param interesting_path: –ø—É—Ç—å –∫ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    :param not_interesting_path: –ø—É—Ç—å –∫ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    da_ta = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
    print(f"{da_ta}: –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
    dt = get_start_dt(int(days_delta), int(hours_delta))
    vk_session = authorization_vk(login, password, app_id, client_secret)
    search_querys = th.get_search_querys(datetime.datetime.now())
    all_ids_events = search_all_event_by_city(vk_session, search_querys, int(id_city), int(id_country))
    events = sort_group_by_date(vk_session, all_ids_events, dt, hours_delta)
    if len(events) == 0:
        post_nothing(vk_session, id_group, city_name, dt)
        da_ta = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        print(f'{da_ta}: –ù–µ—Ç—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è {city_name} –Ω–∞ {dt.strftime("%d.%m.%Y %H:%M")}')
    fields = ['description', 'finish_date', 'status', 'has_photo', 'crop_photo', 'site']
    events = up_all_fields(vk_session, fields, events)
    events = th.sort_events_by_date(events)
    interesting_events = []
    not_interesting_events = []
    if check_file(interesting_path):
        interesting = list_from_file(interesting_path)
        interesting_events = th.sort_events_by_keys(events, interesting)
        events = th.minus_events(events, interesting_events)
    if check_file(not_interesting_path):
        not_interesting = list_from_file(not_interesting_path)
        not_interesting_events = th.sort_events_by_keys(events, not_interesting)
        events = th.minus_events(events, not_interesting_events)
    text_interesting_events = generate_block_text_events(interesting_events, hours_delta, dt)
    text_others_events = generate_block_text_events(events, hours_delta, dt)
    text_not_interesting_events = generate_trash_block(not_interesting_events, hours_delta, dt)
    photos = photo_to_post(interesting_events, events)
    req = post_events_in_vk(vk_session, text_interesting_events, text_others_events,
                            text_not_interesting_events, id_group, city_name, dt, photos)
    if 'post_id' in req:
        da_ta = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        print(f"{da_ta}: —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
    else:
        error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')



login = password = app_id = client_secret = id_country = id_city = id_group = city_name = hours_delta = \
    days_delta = interesting_path = not_interesting_path = ''
# –≤–∑—è—Ç–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞ settings.ini
if check_file('settings.ini'):
    config = configparser.ConfigParser()
    config.read('settings.ini', encoding="utf-8")
    login = config['vk']['login']  # –ª–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ VK
    password = config['vk']['password']  # –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ VK
    app_id = config['vk']['app_id']  # id –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    client_secret = config['vk']['client_secret']  # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    id_country = config['vk']['id_country']  # id —Å—Ç—Ä–∞–Ω—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    id_city = config['vk']['id_city']  # id –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    id_group = config['vk']['id_group']  # id –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å
    # –¥–∞–ª—å—à–µ –∏–¥—É—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    city_name = config['settings']['city_name']  # –∏–º—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    hours_delta = config['settings']['hours_delta']  # —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö –æ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    days_delta = config['settings']['days_delta']  # —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö 0 —Å–µ–≥–æ–¥–Ω—è 1 –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.
    interesting_path = config['settings']['interesting_path']  # –ø—É—Ç—å –∫ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    not_interesting_path = config['settings']['not_interesting_path']  # –ø—É—Ç—å –∫ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
else:
    error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 'settings.ini'")

try:
    main(login, password, app_id, client_secret, id_country, id_city, id_group, city_name, int(hours_delta),
         int(days_delta), interesting_path, not_interesting_path)
except Exception:
    log.log(traceback.format_exc())
    error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–µ')
